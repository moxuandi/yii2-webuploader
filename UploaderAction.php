<?php
namespace moxuandi\webuploader;

use Yii;
use yii\base\Action;
use yii\helpers\Json;
use moxuandi\helpers\Uploader;

/**
 * WebUploader 接收上传图片控制器
 *
 * @author  zhangmoxuan <1104984259@qq.com>
 * @link  http://www.zhangmoxuan.com
 * @QQ  1104984259
 * @Date  2017/7/12
 */
class UploaderAction extends Action
{
    public $config = [];  // 配置接口, 参考 init() 中的 $_config


    public function init()
    {
        yii::$app->request->enableCsrfValidation = false;  // 关闭csrf
        $_config = [  // 默认的上传配置信息
            'maxSize' => 5*1024*1024,  // 上传大小限制, 单位B, 默认5MB, 注意修改服务器的大小限制
            'allowFiles' => ['.png', '.jpg', '.jpeg', '.gif', '.bmp'],  // 上传图片格式显示
            'thumbStatus' => false,  // 是否生成缩略图
            'thumbWidth' => 300,  // 缩略图宽度
            'thumbHeight' => 200,  // 缩略图高度
            'thumbMode' => 'outbound',  // 生成缩略图的方式, 'inset'(补白), 'outbound'(裁剪, 默认值).
            'pathFormat' => '/uploads/image/{yyyy}{mm}/{yy}{mm}{dd}_{hh}{ii}{ss}_{rand:4}',  // 上传保存路径, 可以自定义保存路径和文件名格式
                /* {filename} 会替换成原文件名[要注意中文文件乱码问题] */
                /* {rand:6} 会替换成随机数, 后面的数字是随机数的位数 */
                /* {time} 会替换成时间戳 */
                /* {yyyy} 会替换成四位年份 */
                /* {yy} 会替换成两位年份 */
                /* {mm} 会替换成两位月份 */
                /* {dd} 会替换成两位日期 */
                /* {hh} 会替换成两位小时 */
                /* {ii} 会替换成两位分钟 */
                /* {ss} 会替换成两位秒 */
                /* 非法字符 \ : * ? " < > | */
                /* 具请体看线上文档: http://fex.baidu.com/ueditor/#server-path 3.1 */
        ];
        $this->config = array_merge($_config, $this->config);
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function run()
    {
        if(Yii::$app->request->get('action') == 'initFile'){
            self::initFile();
        }else{
            self::uploadJson();
        }
    }

    // 执行上传操作, 返回上传结果
    public function uploadJson()
    {
        $up = new Uploader('file', $this->config, 'upload');
        if($up->stateInfo === 'SUCCESS'){
            echo Json::encode(['code'=>1, 'url' => $up->fullName]);
            exit();
        }else{
            echo Json::encode(['code'=>0, 'msg'=>$up->stateInfo]);
            exit();
        }
    }

    // 初始化时显示已上传图片, 返回已上传图片的信息
    public function initFile()
    {
        $urls = explode(',', Yii::$app->request->post('urls'));
        $response = [];
        foreach($urls as $k => $url){
            $filePath = substr($url, strstr ($url, '/') + 1);
            $response[$k]['name'] = substr($url, strrpos($url, '/') + 1);
            $response[$k]['size'] = filesize($filePath);
            $response[$k]['type'] = mime_content_type($filePath);
            //$response[$k]['lastModifiedDate'] = filemtime($filePath);
            $response[$k]['ext'] = substr(strrchr($filePath, '.'), 1);
            $response[$k]['url'] = $url;
            $response[$k]['path'] = self::makeThumb($filePath, Yii::$app->request->post('width'), Yii::$app->request->post('height'), $response[$k]['type'], $response[$k]['size'],$response[$k]['name']);
        }
        echo Json::encode($response);
        exit();
    }

    /**
     * 渲染缩略图, 返回缩略图的 Data URL 值
     * @param string $tempName  原始图片的路径
     * @param int $width  缩略图的宽度
     * @param int $height  缩略图的高度
     * @param string $mime  原始图片的 MIME 类型
     * @param int $size  原始图片的大小
     * @param string $name  原始图片的文件名
     * @return string  缩略图的 Data URL 值
     */
    public function makeThumb($tempName, $width=150, $height=100, $mime='image/jpeg', $size=0, $name='thumb.jpg')
    {
        $bgimg = imagecreatetruecolor($width, $height);  // 新建一个真彩色图像
        $white = imagecolorallocate($bgimg, 255, 255, 255);  // 为一幅图像分配颜色
        imagefill($bgimg, 0, 0, $white);  // 图形着色
        switch($mime){
            case 'image/gif':
                $im = @imagecreatefromgif($tempName);
                $outfun = 'imagegif';
                break;
            case 'image/png':
                $im = @imagecreatefrompng($tempName);
                $outfun = 'imagepng';
                break;
            case 'image/jpeg':
                $im = @imagecreatefromjpeg($tempName);
                $outfun = 'imagejpeg';
                break;
            default: return false;
        }

        $imgInfo = getimagesize($tempName);

        if($imgInfo[0] / $width >= $imgInfo[1] / $height){
            $new_height = $height;
            $new_width = ($height * $imgInfo[0]) / $imgInfo[1];
            $bg_x = ($width - $new_width) / 2;
            imagecopyresampled($bgimg, $im, $bg_x, 0, 0, 0, $new_width, $new_height, $imgInfo[0], $imgInfo[1]);
        }else{
            $new_width = $width;
            $new_height = ($width * $imgInfo[1]) / $imgInfo[0];
            $bg_y = ($height - $new_height) / 2;
            imagecopyresampled($bgimg, $im, 0, $bg_y, 0, 0, $new_width, $new_height, $imgInfo[0], $imgInfo[1]);
        }

        $thumb = 'uploads/' . time() . $name;
        $outfun($bgimg, $thumb);
        imagedestroy($bgimg);

        $fp = fopen($thumb, 'rb');
        $base64 = 'data:' . $mime . ';base64,' . chunk_split(base64_encode(fread($fp, $size)));
        fclose($fp);
        unlink($thumb);

        return $base64;
    }
}
